{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas_datareader import data as pdr\n",
    "import yfinance as yf\n",
    "import time\n",
    "import datetime\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas_datareader.data as wb \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "yf.pdr_override()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "issuer_stock_codes = 'BYAN.JK'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%%**********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "end_date = datetime.datetime.now()\n",
    "start_date = end_date - datetime.timedelta(days=5*365)\n",
    "data = pdr.get_data_yahoo(issuer_stock_codes, start=start_date, end=end_date.strftime(\"%Y-%m-%d\"))\n",
    "high9 = data.High.rolling(9).max()\n",
    "Low9 = data.High.rolling(9).min()   \n",
    "high26 = data.High.rolling(26).max()\n",
    "Low26 = data.High.rolling(26).min()\n",
    "high52 = data.High.rolling(52).max()\n",
    "Low52 = data.High.rolling(52).min()\n",
    "\n",
    "data['tenkan_sen'] = (high9 + Low9) / 2\n",
    "data['kijun_sen'] = (high26 + Low26) / 2\n",
    "data['senkou_span_a'] = ((data['tenkan_sen'] + data['kijun_sen']) / 2).shift(26) \n",
    "data['senkou_span_b'] = ((high52 + Low52) / 2).shift(26)\n",
    "data['chikou'] = data.Close.shift(-26)\n",
    "data = data.iloc[26:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(data.index, data['tenkan_sen'], lw=0.7, color='red')\n",
    "plt.plot(data.index, data['kijun_sen'], lw=0.7, color='yellow')\n",
    "plt.plot(data.index, data['chikou'], lw=0.7, color='grey')\n",
    "plt.plot(data.index, data['Close'], lw=0.7, color='green')\n",
    "plt.title(\"Ichimoku Saham : \" + str(issuer_stock_codes))\n",
    "plt.ylabel(\"Harga\")\n",
    "kumo = data['Adj Close'].plot(lw=0.7, color='blue')\n",
    "kumo.fill_between(data.index, data.senkou_span_a, data.senkou_span_b, where= data.senkou_span_a >= data.senkou_span_b, color='lightgreen')\n",
    "kumo.fill_between(data.index, data.senkou_span_a, data.senkou_span_b, where= data.senkou_span_a < data.senkou_span_b, color='lightcoral')\n",
    "plt.grid()  \n",
    "# plt.savefig(f'plot_{issuer_stock_codes}.png')\n",
    "plt.show()\n",
    "plt.clf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Kode Emiten :  BYAN.JK\n",
      "Close Price: 19000.0\n",
      "tenkan_sen: 19062.5\n",
      "kijun_sen: 19225.0\n",
      "senkou_span_a: 19506.25\n",
      "senkou_span_b: 19675.0\n"
     ]
    }
   ],
   "source": [
    "print (\"\\nKode Emiten : \", issuer_stock_codes)\n",
    "print(\"Close Price:\", data['Close'].iloc[-1])\n",
    "print(\"tenkan_sen:\", data['tenkan_sen'].iloc[-1])\n",
    "print(\"kijun_sen:\", data['kijun_sen'].iloc[-1])\n",
    "print(\"senkou_span_a:\", data['senkou_span_a'].iloc[-1])\n",
    "print(\"senkou_span_b:\", data['senkou_span_b'].iloc[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Tenkan-Sen is in an uptrend.\n"
     ]
    }
   ],
   "source": [
    "######################################## SEKAN_SEN FACTOR\n",
    "# Prepare data for linear regression\n",
    "tenkan_sen = data['tenkan_sen']\n",
    "x = np.array(range(len(tenkan_sen))).reshape(-1, 1)\n",
    "y = tenkan_sen.values.reshape(-1, 1)\n",
    "\n",
    "# Perform linear regression\n",
    "model = LinearRegression()\n",
    "model.fit(x, y)\n",
    "\n",
    "# Get the slope of the line\n",
    "slope = model.coef_[0]\n",
    "\n",
    "# Determine the trend\n",
    "if slope > 0:\n",
    "    print(\"The Tenkan-Sen is in an uptrend.\")\n",
    "elif slope < 0:\n",
    "    print(\"The Tenkan-Sen is in a downtrend.\")\n",
    "else:\n",
    "    print(\"The Tenkan-Sen is moving sideways.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The market is in a downward trend (kijun_sen).\n"
     ]
    }
   ],
   "source": [
    "######################################## KIJUN_SEN FACTOR\n",
    "# Get the last closing price and the last Kijun-Sen value\n",
    "last_close = data['Close'].iloc[-1]\n",
    "last_kijun_sen = data['kijun_sen'].iloc[-1]\n",
    "\n",
    "# Determine the trend based on the position of the closing price relative to the Kijun-Sen line\n",
    "if last_close > last_kijun_sen:\n",
    "    print(\"The market is in an upward trend (kijun_sen).\")\n",
    "elif last_close < last_kijun_sen:\n",
    "    print(\"The market is in a downward trend (kijun_sen).\")\n",
    "else:\n",
    "    print(\"The market is moving sideways (kijun_sen).\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status (senkou_span): Downtrend\n"
     ]
    }
   ],
   "source": [
    "######################################## SENKOU_SEN (KUMO) FACTOR\n",
    "# Get the last closing price and the last Senkou Span A and B values\n",
    "last_close = data['Close'].iloc[-1]\n",
    "last_senkou_span_a = data['senkou_span_a'].iloc[-1]\n",
    "last_senkou_span_b = data['senkou_span_b'].iloc[-1]\n",
    "\n",
    "# Determine the market trend and potential price movements based on the position of the closing price relative to the Senkou Span A and B lines\n",
    "if last_close > last_senkou_span_a and last_senkou_span_a > last_senkou_span_b:\n",
    "    print(\"Status (senkou_span): Uptrend\")\n",
    "elif last_close < last_senkou_span_a and last_senkou_span_a < last_senkou_span_b:\n",
    "    print(\"Status (senkou_span): Downtrend\")\n",
    "elif last_close < last_senkou_span_b and last_senkou_span_a > last_senkou_span_b:\n",
    "    print(\"Status (senkou_span): Will Dump\")\n",
    "elif last_close > last_senkou_span_b and last_senkou_span_a < last_senkou_span_b:\n",
    "    print(\"Status (senkou_span): Will Pump\")\n",
    "elif last_senkou_span_b < last_close < last_senkou_span_a and last_senkou_span_a > last_senkou_span_b:\n",
    "    print(\"Status (senkou_span): Uptrend and Will Bounce Up\")\n",
    "elif last_senkou_span_b < last_close < last_senkou_span_a and last_senkou_span_a < last_senkou_span_b:\n",
    "    print(\"Status (senkou_span): Downtrend and Will Bounce Down\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import pandas as pd\n",
    "# from sklearn.model_selection import train_test_split\n",
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "# from sklearn.metrics import classification_report\n",
    "# # Add the 'trend' column to the dataframe\n",
    "# df['trend'] = df['Close'].diff().shift(-1)\n",
    "# df['trend'] = df['trend'].apply(lambda x: 1 if x > 0 else -1)\n",
    "\n",
    "# # Define features and labels\n",
    "# features = df[['tenkan_sen', 'kijun_sen', 'senkou_span_a', 'senkou_span_b']]\n",
    "# labels = df['trend']\n",
    "\n",
    "# # Split the data into training and testing sets\n",
    "# features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# # Create and train the model\n",
    "# model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "# model.fit(features_train, labels_train)\n",
    "\n",
    "# # Make predictions on the test set\n",
    "# predictions = model.predict(features_test)\n",
    "\n",
    "# # Evaluate the model\n",
    "# print(classification_report(labels_test, predictions))\n",
    "\n",
    "# # Now you can use the model to predict trends based on current values\n",
    "# current_tenkan_sen = data['tenkan_sen'].iloc[-1]\n",
    "# current_kijun_sen = data['kijun_sen'].iloc[-1]\n",
    "# current_senkou_span_a = data['senkou_span_a'].iloc[-1]\n",
    "# current_senkou_span_b = data['senkou_span_b'].iloc[-1]\n",
    "\n",
    "# current_values = pd.DataFrame([[current_tenkan_sen, current_kijun_sen, current_senkou_span_a, current_senkou_span_b]], columns=['tenkan_sen', 'kijun_sen', 'senkou_span_a', 'senkou_span_b'])\n",
    "# current_trend_prediction = model.predict(current_values)\n",
    "\n",
    "# print(\"Predicted trend based on current values: \", current_trend_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# # Step 1: Import the necessary libraries for machine learning\n",
    "# from sklearn.model_selection import train_test_split\n",
    "# from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# # Step 2: Define features and labels\n",
    "# features = data['tenkan_sen'].values.reshape(-1, 1)  # Use the historical values of the Tenkan-Sen line as features\n",
    "# df = data.copy()  # Explicitly create a copy of 'data'\n",
    "# df['trend'] = df['Close'].diff().shift(-1)\n",
    "# df['trend'] = df['trend'].apply(lambda x: 1 if x > 0 else -1)\n",
    "# labels = df['trend'].values  # Use the closing price trend as labels\n",
    "\n",
    "# # Step 3: Split the data into training and testing sets\n",
    "# features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# # Step 4: Train the machine learning model\n",
    "# model = RandomForestClassifier(random_state=42)\n",
    "# model.fit(features_train, labels_train)\n",
    "\n",
    "# # Step 5: Evaluate the model's performance\n",
    "# predictions = model.predict(features_test)\n",
    "# accuracy = accuracy_score(labels_test, predictions)\n",
    "# precision = precision_score(labels_test, predictions)\n",
    "# recall = recall_score(labels_test, predictions)\n",
    "# f1 = f1_score(labels_test, predictions)\n",
    "\n",
    "# # Print the evaluation metrics\n",
    "# print(\"Accuracy:\", accuracy)\n",
    "# print(\"Precision:\", precision)\n",
    "# print(\"Recall:\", recall)\n",
    "# print(\"F1-score:\", f1)\n",
    "\n",
    "# # Calculate the percentage accuracy of the prediction that the closing price trend will rise when the Tenkan-Sen line is rising\n",
    "# rising_trend_indices = rising_trend_indices = (features_test.flatten()[:-1] < features_test.flatten()[1:]).nonzero()[0]\n",
    "# correct_predictions = (predictions[rising_trend_indices] == 1).sum()\n",
    "# percentage_accuracy = correct_predictions / len(rising_trend_indices) * 100\n",
    "\n",
    "# print(f\"Percentage Accuracy of Predicting Rising Trend: {percentage_accuracy}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_4661/2727026571.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['tenkan_sen_trend'] = data['tenkan_sen'].diff()\n",
      "/tmp/ipykernel_4661/2727026571.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['tenkan_sen_trend'] = data['tenkan_sen_trend'].apply(lambda x: 'uptrend' if x > 0 else 'downtrend')\n",
      "/tmp/ipykernel_4661/2727026571.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['future_close_trend'] = data['Close'].diff().shift(-1)\n",
      "/tmp/ipykernel_4661/2727026571.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['future_close_trend'] = data['future_close_trend'].apply(lambda x: 'rise' if x > 0 else 'fall')\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'RandomForestClassifier' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[18], line 28\u001b[0m\n\u001b[1;32m     25\u001b[0m features_train, features_test, labels_train, labels_test \u001b[38;5;241m=\u001b[39m train_test_split(features, labels, test_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.2\u001b[39m, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)\n\u001b[1;32m     27\u001b[0m \u001b[38;5;66;03m# Step 7: Train the machine learning model\u001b[39;00m\n\u001b[0;32m---> 28\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mRandomForestClassifier\u001b[49m(random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)\n\u001b[1;32m     29\u001b[0m model\u001b[38;5;241m.\u001b[39mfit(features_train, labels_train)\n\u001b[1;32m     31\u001b[0m \u001b[38;5;66;03m# Step 8: Evaluate the model's performance\u001b[39;00m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'RandomForestClassifier' is not defined"
     ]
    }
   ],
   "source": [
    "#TEKAN_SEN\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Step 1: Create a new column 'tenkan_sen_trend' that indicates whether 'tenkan_sen' is in an uptrend or downtrend\n",
    "data['tenkan_sen_trend'] = data['tenkan_sen'].diff()\n",
    "data['tenkan_sen_trend'] = data['tenkan_sen_trend'].apply(lambda x: 'uptrend' if x > 0 else 'downtrend')\n",
    "\n",
    "# Step 2: Create a new column 'future_close_trend' that indicates whether the 'Close' price will rise or fall in the future\n",
    "data['future_close_trend'] = data['Close'].diff().shift(-1)\n",
    "data['future_close_trend'] = data['future_close_trend'].apply(lambda x: 'rise' if x > 0 else 'fall')\n",
    "\n",
    "# Step 3: Drop the last row which will have a NaN value in the 'future_close_trend' column\n",
    "data = data[:-1]\n",
    "\n",
    "# Step 4: Encode 'tenkan_sen_trend' and 'future_close_trend' to numerical values\n",
    "le = LabelEncoder()\n",
    "data['tenkan_sen_trend'] = le.fit_transform(data['tenkan_sen_trend'])\n",
    "data['future_close_trend'] = le.fit_transform(data['future_close_trend'])\n",
    "\n",
    "# Step 5: Define features and labels\n",
    "features = data['tenkan_sen_trend'].values.reshape(-1, 1)\n",
    "labels = data['future_close_trend'].values\n",
    "\n",
    "# Step 6: Split the data into training and testing sets\n",
    "features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# Step 7: Train the machine learning model\n",
    "model = RandomForestClassifier(random_state=42)\n",
    "model.fit(features_train, labels_train)\n",
    "\n",
    "# Step 8: Evaluate the model's performance\n",
    "predictions = model.predict(features_test)\n",
    "accuracy = accuracy_score(labels_test, predictions)\n",
    "precision = precision_score(labels_test, predictions, average='micro')\n",
    "recall = recall_score(labels_test, predictions, average='micro')\n",
    "f1 = f1_score(labels_test, predictions, average='micro')\n",
    "\n",
    "# Print the evaluation metrics\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1-score:\", f1)\n",
    "\n",
    "# Calculate the accuracy\n",
    "accuracy = accuracy_score(labels_test, predictions)\n",
    "\n",
    "# Convert the accuracy to a percentage and print it\n",
    "accuracy_percentage = accuracy * 100\n",
    "print(\"Accuracy: {:.2f}%\".format(accuracy_percentage))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#KIJUN_SEN\n",
    "# Import necessary libraries\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "# Create a new column 'trend' that indicates whether the price is in an uptrend or downtrend\n",
    "data.loc[:, 'trend'] = np.where(data['Close'] > data['kijun_sen'], 'uptrend', 'downtrend')\n",
    "\n",
    "# Shift the 'trend' column by -1 to align the trend with the next day's price\n",
    "data.loc[:, 'trend'] = data['trend'].shift(-1)\n",
    "\n",
    "# Drop the last row which will have a NaN value in the 'trend' column\n",
    "data = data[:-1]\n",
    "\n",
    "# Define features and labels\n",
    "features = np.column_stack((data['Close'], data['kijun_sen']))\n",
    "labels = data['trend']\n",
    "\n",
    "# Split data into training and testing sets\n",
    "features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the machine learning model\n",
    "model = RandomForestClassifier(random_state=42)\n",
    "model.fit(features_train, labels_train)\n",
    "\n",
    "# Make predictions on the testing set\n",
    "predictions = model.predict(features_test)\n",
    "\n",
    "# Evaluate the model's performance\n",
    "accuracy = accuracy_score(labels_test, predictions)\n",
    "precision = precision_score(labels_test, predictions, average='micro')\n",
    "recall = recall_score(labels_test, predictions, average='micro')\n",
    "f1 = f1_score(labels_test, predictions, average='micro')\n",
    "\n",
    "# Calculate the percentage accuracy of the prediction\n",
    "percentage_accuracy = accuracy * 100\n",
    "\n",
    "# Print the evaluation metrics and percentage accuracy\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1-score:\", f1)\n",
    "print(f\"Percentage Accuracy of Predicting Trend: {percentage_accuracy}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#SENKOU_SPAN\n",
    "# Step 1: Import the necessary libraries and modules\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Step 2: Define features and labels\n",
    "features = np.array([df['Close'], df['senkou_span_a'], df['senkou_span_b']]).T\n",
    "labels = np.array(df['trend'])\n",
    "\n",
    "# Step 3: Split the data into training and testing sets\n",
    "features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# Step 4: Train the machine learning model\n",
    "model = RandomForestClassifier(random_state=42)\n",
    "model.fit(features_train, labels_train)\n",
    "\n",
    "# Step 5: Evaluate the model's performance\n",
    "predictions = model.predict(features_test)\n",
    "accuracy = accuracy_score(labels_test, predictions)\n",
    "precision = precision_score(labels_test, predictions)\n",
    "recall = recall_score(labels_test, predictions)\n",
    "f1 = f1_score(labels_test, predictions)\n",
    "\n",
    "# Step 6: Calculate the accuracy of predictions for each market condition\n",
    "# Define the conditions for each market trend   \n",
    "uptrend_condition = (df['Close'] > df['senkou_span_a']) & (df['senkou_span_a'] > df['senkou_span_b'])\n",
    "downtrend_condition = (df['Close'] < df['senkou_span_a']) & (df['senkou_span_a'] < df['senkou_span_b'])\n",
    "dump_condition = (df['Close'] < df['senkou_span_b']) & (df['senkou_span_a'] > df['senkou_span_b'])\n",
    "pump_condition = (df['Close'] > df['senkou_span_b']) & (df['senkou_span_a'] < df['senkou_span_b'])\n",
    "bouncing_up_condition = ((df['senkou_span_b'] < df['Close']) & (df['Close'] < df['senkou_span_a'])) & (df['senkou_span_a'] > df['senkou_span_b'])\n",
    "bouncing_down_condition = ((df['senkou_span_b'] > df['Close']) & (df['Close'] > df['senkou_span_a'])) & (df['senkou_span_a'] < df['senkou_span_b'])\n",
    "\n",
    "# Calculate the percentage accuracy for each condition\n",
    "uptrend_accuracy = accuracy_score(labels[uptrend_condition], model.predict(features[uptrend_condition])) * 100\n",
    "downtrend_accuracy = accuracy_score(labels[downtrend_condition], model.predict(features[downtrend_condition])) * 100\n",
    "dump_accuracy = accuracy_score(labels[dump_condition], model.predict(features[dump_condition])) * 100\n",
    "pump_accuracy = accuracy_score(labels[pump_condition], model.predict(features[pump_condition])) * 100\n",
    "bouncing_up_accuracy = accuracy_score(labels[bouncing_up_condition], model.predict(features[bouncing_up_condition])) * 100\n",
    "bouncing_down_accuracy = accuracy_score(labels[bouncing_down_condition], model.predict(features[bouncing_down_condition])) * 100\n",
    "\n",
    "# Print the results\n",
    "print(\"Model Performance:\")\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1-score:\", f1)\n",
    "print(\"Percentage Accuracy for Each Market Condition:\")\n",
    "print(f\"Uptrend Accuracy: {uptrend_accuracy}%\")\n",
    "print(f\"Downtrend Accuracy: {downtrend_accuracy}%\")\n",
    "print(f\"Dump Accuracy: {dump_accuracy}%\")\n",
    "print(f\"Pump Accuracy: {pump_accuracy}%\")\n",
    "print(f\"Bouncing Up Accuracy: {bouncing_up_accuracy}%\")\n",
    "print(f\"Bouncing Down Accuracy: {bouncing_down_accuracy}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
