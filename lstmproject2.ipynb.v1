{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "tf.device('/GPU:0')\n",
    "sns.set_style('whitegrid')\n",
    "plt.style.use(\"fivethirtyeight\")\n",
    "%matplotlib inline\n",
    "\n",
    "from pandas_datareader.data import DataReader\n",
    "import yfinance as yf\n",
    "from pandas_datareader import data as pdr\n",
    "yf.pdr_override()\n",
    "\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "import importlib\n",
    "import sql\n",
    "\n",
    "importlib.reload(sql)\n",
    "from sql import show_tables, insert_tables, show_specific_tables, get_issuer\n",
    "\n",
    "row = get_issuer()\n",
    "# for r in range(j):\n",
    "for stock in row:\n",
    "    stock_data = [stock]\n",
    "    print()\n",
    "    print(stock_data)\n",
    "\n",
    "    end = datetime.now()\n",
    "    start = datetime(end.year - 10, end.month, end.day)\n",
    "\n",
    "    data = {}\n",
    "\n",
    "    for stock in stock_data:\n",
    "        data[stock] = yf.download(stock, start, end)\n",
    "        while data[stock].empty and start < end:\n",
    "            start += timedelta(days=1)\n",
    "            data[stock] = yf.download(stock, start, end)\n",
    "\n",
    "    company_list = [data[stock] for stock in stock_data]\n",
    "    company_name = [stock]\n",
    "\n",
    "    for company, com_name in zip(company_list, company_name):\n",
    "        company[\"company_name\"] = com_name\n",
    "\n",
    "    df = pd.concat(company_list, axis=0)\n",
    "\n",
    "    # Summary Stats and General Info\n",
    "    print(df.describe())\n",
    "    print(df.info())\n",
    "\n",
    "    # Historical closing price\n",
    "    plt.figure(figsize=(15, 10))\n",
    "    plt.subplots_adjust(top=1.25, bottom=1.2)\n",
    "\n",
    "    for i, company in enumerate(company_list, 1):\n",
    "        plt.subplot(1, 1, i)\n",
    "        company['Adj Close'].plot()\n",
    "        plt.ylabel('Adj Close')\n",
    "        plt.xlabel(None)\n",
    "        plt.title(f\"Closing Price of {company_name[i - 1]}\")\n",
    "        \n",
    "    plt.tight_layout()\n",
    "    plt.savefig(f'picture/closing_price/{stock}.png')\n",
    "    # plt.show()  # Ensure plots are displayed\n",
    "\n",
    "    # Total volume of stock traded each day\n",
    "    plt.figure(figsize=(15, 10))\n",
    "    plt.subplots_adjust(top=1.25, bottom=1.2)\n",
    "\n",
    "    for i, company in enumerate(company_list, 1):\n",
    "        plt.subplot(1, 1, i)\n",
    "        company['Volume'].plot()\n",
    "        plt.ylabel('Volume')\n",
    "        plt.xlabel(None)\n",
    "        plt.title(f\"Sales Volume for {company_name[i - 1]}\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(f'picture/sales_volume/{stock}.png')\n",
    "    # plt.show()  # Ensure plots are displayed\n",
    "    \n",
    "    # end = datetime.now()\n",
    "    # start = datetime(end.year-10, end.month, end.day)\n",
    "    \n",
    "    # # Get the stock quote\n",
    "    # df = pdr.get_data_yahoo(stock, start=start, end=end)\n",
    "\n",
    "    plt.figure(figsize=(16, 6))\n",
    "    plt.title('Close Price History')\n",
    "    plt.plot(df['Close'])\n",
    "    plt.xlabel('Date', fontsize=18)\n",
    "    plt.ylabel('Close Price IDR', fontsize=18)\n",
    "    plt.savefig(f'picture/close_price_history/{stock}.png')\n",
    "    # plt.show()\n",
    "\n",
    "    data = df.filter(['Close'])\n",
    "    dataset = data.values\n",
    "    \n",
    "    from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "    scaled_data = scaler.fit_transform(dataset)\n",
    "\n",
    "    # Split data into training and testing sets\n",
    "    train_data = scaled_data[:-365]\n",
    "    test_data = scaled_data[-365-60:]\n",
    "\n",
    "    x_train = []\n",
    "    y_train = []\n",
    "\n",
    "    for i in range(60, len(train_data)):\n",
    "        x_train.append(train_data[i-60:i, 0])\n",
    "        y_train.append(train_data[i, 0])\n",
    "\n",
    "    x_train, y_train = np.array(x_train), np.array(y_train)\n",
    "    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "\n",
    "    from keras.models import Sequential\n",
    "    from keras.layers import Dense, LSTM\n",
    "\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1], 1)))\n",
    "    model.add(LSTM(64, return_sequences=False))\n",
    "    model.add(Dense(25))\n",
    "    model.add(Dense(1))\n",
    "\n",
    "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "    model.fit(x_train, y_train, batch_size=1, epochs=1)\n",
    "\n",
    "    x_test = []\n",
    "    y_test = scaled_data[-365:]\n",
    "\n",
    "    print(\"THIS IS THE TEST DATA :\", test_data)\n",
    "    for i in range(60, len(test_data)):\n",
    "        x_test.append(test_data[i-60:i, 0])\n",
    "\n",
    "    x_test = np.array(x_test)\n",
    "    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "\n",
    "    predictions = model.predict(x_test)\n",
    "    predictions = scaler.inverse_transform(predictions)\n",
    "\n",
    "    # Generate dates for the next year\n",
    "    future_dates = pd.date_range(end + timedelta(days=1), periods=365, freq='D')\n",
    "\n",
    "    plt.figure(figsize=(16, 6))\n",
    "    plt.title('Predicted Close Price for the Next Year')\n",
    "    plt.xlabel('Date', fontsize=18)\n",
    "    plt.ylabel('Close Price IDR', fontsize=18)\n",
    "    plt.plot(future_dates, predictions)\n",
    "    plt.savefig(f'picture/prediction/prediction_{stock}.png')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_style('whitegrid')\n",
    "plt.style.use(\"fivethirtyeight\")\n",
    "%matplotlib inline\n",
    "\n",
    "from pandas_datareader.data import DataReader\n",
    "import yfinance as yf\n",
    "from pandas_datareader import data as pdr\n",
    "yf.pdr_override()\n",
    "\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "# Stock data\n",
    "stock_data = ['BREN.JK']\n",
    "\n",
    "end = datetime.now()\n",
    "start = datetime(end.year - 1, end.month, end.day)\n",
    "\n",
    "data = {}\n",
    "\n",
    "for stock in stock_data:\n",
    "    data[stock] = yf.download(stock, start, end)\n",
    "\n",
    "company_list = [data[stock] for stock in stock_data]\n",
    "company_name = [\"BREN\"]\n",
    "\n",
    "for company, com_name in zip(company_list, company_name):\n",
    "    company[\"company_name\"] = com_name\n",
    "\n",
    "df = pd.concat(company_list, axis=0)\n",
    "\n",
    "# Summary Stats and General Info\n",
    "print(df.describe())\n",
    "print(df.info())\n",
    "\n",
    "# Historical closing price\n",
    "plt.figure(figsize=(15, 10))\n",
    "plt.subplots_adjust(top=1.25, bottom=1.2)\n",
    "\n",
    "for i, company in enumerate(company_list, 1):\n",
    "    plt.subplot(1, 1, i)\n",
    "    company['Adj Close'].plot()\n",
    "    plt.ylabel('Adj Close')\n",
    "    plt.xlabel(None)\n",
    "    plt.title(f\"Closing Price of {company_name[i - 1]}\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()  # Ensure plots are displayed\n",
    "\n",
    "# Total volume of stock traded each day\n",
    "plt.figure(figsize=(15, 10))\n",
    "plt.subplots_adjust(top=1.25, bottom=1.2)\n",
    "\n",
    "for i, company in enumerate(company_list, 1):\n",
    "    plt.subplot(1, 1, i)\n",
    "    company['Volume'].plot()\n",
    "    plt.ylabel('Volume')\n",
    "    plt.xlabel(None)\n",
    "    plt.title(f\"Sales Volume for {company_name[i - 1]}\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()  # Ensure plots are displayed\n",
    "\n",
    "# Get the stock quote\n",
    "df = pdr.get_data_yahoo('BREN.JK', start='2012-01-01', end=end)\n",
    "\n",
    "plt.figure(figsize=(16, 6))\n",
    "plt.title('Close Price History')\n",
    "plt.plot(df['Close'])\n",
    "plt.xlabel('Date', fontsize=18)\n",
    "plt.ylabel('Close Price IDR', fontsize=18)\n",
    "plt.show()\n",
    "\n",
    "data = df.filter(['Close'])\n",
    "dataset = data.values\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "scaled_data = scaler.fit_transform(dataset)\n",
    "\n",
    "# Split data into training and testing sets\n",
    "train_data = scaled_data[:-365]\n",
    "test_data = scaled_data[-365-60:]\n",
    "\n",
    "x_train = []\n",
    "y_train = []\n",
    "\n",
    "for i in range(60, len(train_data)):\n",
    "    x_train.append(train_data[i-60:i, 0])\n",
    "    y_train.append(train_data[i, 0])\n",
    "\n",
    "x_train, y_train = np.array(x_train), np.array(y_train)\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, LSTM\n",
    "\n",
    "model = Sequential()\n",
    "model.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1], 1)))\n",
    "model.add(LSTM(64, return_sequences=False))\n",
    "model.add(Dense(25))\n",
    "model.add(Dense(1))\n",
    "\n",
    "model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "model.fit(x_train, y_train, batch_size=1, epochs=1)\n",
    "\n",
    "x_test = []\n",
    "y_test = scaled_data[-365:]\n",
    "\n",
    "for i in range(60, len(test_data)):\n",
    "    x_test.append(test_data[i-60:i, 0])\n",
    "\n",
    "x_test = np.array(x_test)\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "\n",
    "predictions = model.predict(x_test)\n",
    "predictions = scaler.inverse_transform(predictions)\n",
    "\n",
    "# Generate dates for the next year\n",
    "future_dates = pd.date_range(end + timedelta(days=1), periods=365, freq='D')\n",
    "\n",
    "plt.figure(figsize=(16, 6))\n",
    "plt.title('Predicted Close Price for the Next Year')\n",
    "plt.xlabel('Date', fontsize=18)\n",
    "plt.ylabel('Close Price IDR', fontsize=18)\n",
    "plt.plot(future_dates, predictions)\n",
    "plt.savefig(f'/home/mahaputra971/ProjectLSTM/prediksi-saham-lstm/picture/prediction_{stock}.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "    # from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "    # scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "    # scaled_data = scaler.fit_transform(dataset)\n",
    "\n",
    "    # # Split data into training and testing sets\n",
    "    # train_data = scaled_data[:-365]\n",
    "    # test_data = scaled_data[-365-60:]\n",
    "\n",
    "    # x_train = []\n",
    "    # y_train = []\n",
    "\n",
    "    # for i in range(60, len(train_data)):\n",
    "    #     x_train.append(train_data[i-60:i, 0])\n",
    "    #     y_train.append(train_data[i, 0])\n",
    "\n",
    "    # x_train, y_train = np.array(x_train), np.array(y_train)\n",
    "    # x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "\n",
    "    # from keras.models import Sequential\n",
    "    # from keras.layers import Dense, LSTM\n",
    "\n",
    "    # model = Sequential()\n",
    "    # model.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1], 1)))\n",
    "    # model.add(LSTM(64, return_sequences=False))\n",
    "    # model.add(Dense(25))\n",
    "    # model.add(Dense(1))\n",
    "\n",
    "    # model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "    # model.fit(x_train, y_train, batch_size=1, epochs=1)\n",
    "\n",
    "    # x_test = []\n",
    "    # y_test = scaled_data[-365:]\n",
    "\n",
    "    # print(\"THIS IS THE TEST DATA :\", test_data)\n",
    "    # for i in range(60, len(test_data)):\n",
    "    #     x_test.append(test_data[i-60:i, 0])\n",
    "\n",
    "    # x_test = np.array(x_test)\n",
    "    # x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "\n",
    "    # predictions = model.predict(x_test)\n",
    "    # predictions = scaler.inverse_transform(predictions)\n",
    "\n",
    "    # # Generate dates for the next year\n",
    "    # future_dates = pd.date_range(end + timedelta(days=1), periods=365, freq='D')\n",
    "\n",
    "    # plt.figure(figsize=(16, 6))\n",
    "    # plt.title('Predicted Close Price for the Next Year')\n",
    "    # plt.xlabel('Date', fontsize=18)\n",
    "    # plt.ylabel('   Close Price IDR', fontsize=18)\n",
    "    # plt.plot(future_dates, predictions)\n",
    "    # plt.savefig(f'picture/prediction/prediction_{stock}.png')\n",
    "    # plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
